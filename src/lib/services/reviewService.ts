import { prisma } from '@/lib/db'
import { Review as DbReview, Platform } from '@prisma/client'
import { Review } from '@/types'
import { parseAppStoreReviews, parseAppStoreReviewsAllRegions, parseAppStoreReviewsFromRegions } from '@/lib/parsers/appstore'
import { parseGooglePlayReviews } from '@/lib/parsers/googleplay'

export interface ReviewServiceResult {
  reviews: Review[]
  totalCount: number
  averageRating: number
  fromCache: boolean
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
function normalizeReviewContent(content: string): string {
  return content
    .toLowerCase()
    .replace(/[^\w\s]/g, '') // –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    .replace(/\s+/g, ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
    .trim()
    .substring(0, 200) // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
}

// Helper function to convert DB review to frontend review
function convertDbReviewToFrontend(review: DbReview): Review {
  return {
    id: review.id,
    title: review.title,
    content: review.content,
    rating: review.rating,
    author: review.author,
    date: review.date.toISOString(),
    platform: review.platform.toLowerCase() as 'appstore' | 'googleplay',
    appId: review.appId,
    version: review.version || undefined,
    helpful: review.helpful || undefined
  }
}

// Helper function to deduplicate reviews by content
function deduplicateReviewsByContent(reviews: Review[]): Review[] {
  const seenContentHashes = new Set<string>()
  const uniqueReviews: Review[] = []
  
  for (const review of reviews) {
    const normalizedContent = normalizeReviewContent(review.content)
    const contentHash = `${normalizedContent}_${review.author}_${review.rating}`
    
    if (!seenContentHashes.has(contentHash)) {
      seenContentHashes.add(contentHash)
      uniqueReviews.push(review)
    }
  }
  
  return uniqueReviews
}

export class ReviewService {
  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  static async getReviews(
    appId: string, 
    platform: 'appstore' | 'googleplay',
    forceRefresh = false,
    geoScope: 'single' | 'major' | 'all' | 'americas' | 'europe' | 'asia' | 'english' = 'major'
  ): Promise<ReviewServiceResult> {
    const platformEnum = platform === 'appstore' ? Platform.APPSTORE : Platform.GOOGLEPLAY
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∑—ã–≤—ã –≤ –ë–î –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º geoScope
    const existingReviews = await prisma.review.findMany({
      where: {
        appId,
        platform: platformEnum,
        // –î–ª—è App Store —É—á–∏—Ç—ã–≤–∞–µ–º geoScope, –¥–ª—è Google Play - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        // –í–ê–ñ–ù–û: –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç geoScope: null)
        ...(platform === 'appstore' && geoScope !== 'all' ? { 
          OR: [
            { geoScope },
            { geoScope: null } // –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ geoScope
          ]
        } : platform === 'appstore' && geoScope === 'all' ? {
          // –î–ª—è 'all' - –±–µ—Ä–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç geoScope
        } : {})
      },
      orderBy: { date: 'desc' }
    })

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∑—ã–≤—ã –∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞
    if (!forceRefresh && existingReviews.length > 0) {
      const latestReview = existingReviews[0]
      const cacheThreshold = new Date(Date.now() - 2 * 60 * 60 * 1000) // 2 —á–∞—Å–∞ (—É–≤–µ–ª–∏—á–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª)
      
      console.log(`üîç Found ${existingReviews.length} existing reviews for ${appId} (${platform}, geoScope: ${geoScope})`)
      console.log(`üìÖ Latest review created: ${latestReview.createdAt}, threshold: ${cacheThreshold}`)
      
      // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ —Å geoScope: null,
      // –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º major/single/all - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
      const hasLegacyData = existingReviews.some(r => r.geoScope === null)
      const isCompatibleScope = ['major', 'single', 'all'].includes(geoScope)
      
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à
      // –î–ª—è legacy –¥–∞–Ω–Ω—ã—Ö (geoScope: null) - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–∑—ã–≤–æ–≤
      const shouldUseCache = latestReview.createdAt >= cacheThreshold || 
                            (hasLegacyData && isCompatibleScope && existingReviews.length >= 50)
      
      console.log(`üîÑ Cache decision: shouldUseCache=${shouldUseCache}, hasLegacyData=${hasLegacyData}, isCompatibleScope=${isCompatibleScope}, reviewCount=${existingReviews.length}`)
      
      if (shouldUseCache) {
        console.log(`üìã Loading ${existingReviews.length} reviews from cache for ${appId} (${platform}, geoScope: ${geoScope})`)
        
        const totalRating = existingReviews.reduce((sum, review) => sum + review.rating, 0)
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const convertedReviews = existingReviews.map(convertDbReviewToFrontend)
        const uniqueReviews = deduplicateReviewsByContent(convertedReviews)
        
        return {
          reviews: uniqueReviews,
          totalCount: uniqueReviews.length,
          averageRating: Math.round((totalRating / existingReviews.length) * 10) / 10,
          fromCache: true
        }
      } else {
        console.log(`‚è∞ Cache expired or insufficient data, fetching new reviews for ${appId} (${platform}, geoScope: ${geoScope})`)
      }
    } else {
      console.log(`üîÑ No existing reviews or force refresh for ${appId} (${platform}, geoScope: ${geoScope})`)
    }

    // –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã —Å —É—á–µ—Ç–æ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    console.log(`üåç Starting review collection for ${appId} (${platform}, geoScope: ${geoScope})`)
    let parsedReviews: any
    
    if (platform === 'appstore') {
      switch (geoScope) {
        case 'all':
          console.log('üìç Collecting from ALL regions (15 countries)')
          parsedReviews = await parseAppStoreReviewsAllRegions(appId)
          break
        case 'americas':
        case 'europe':
        case 'asia':
        case 'english':
          console.log(`üìç Collecting from ${geoScope.toUpperCase()} region`)
          parsedReviews = await parseAppStoreReviewsFromRegions(appId, [geoScope])
          break
        case 'major':
          console.log('üìç Collecting from MAJOR countries (RU, US, GB, DE, FR, JP)')
          parsedReviews = await parseAppStoreReviews(appId, ['ru', 'us', 'gb', 'de', 'fr', 'jp'])
          break
        case 'single':
        default:
          console.log('üìç Collecting from RUSSIA only')
          parsedReviews = await parseAppStoreReviews(appId, ['ru'])
          break
      }
    } else {
      console.log('üìç Collecting from Google Play (RU)')
      // Google Play –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω—É (ru)
      parsedReviews = await parseGooglePlayReviews(appId)
    }
    
    console.log(`‚úÖ Collection completed: ${parsedReviews.totalCount} reviews collected`)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–∑—ã–≤—ã
    await this.saveApp(appId, platformEnum)
    
    // –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã (–Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    const newReviews = await this.saveReviews(appId, platformEnum, parsedReviews.reviews, geoScope)
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –ë–î (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ) —Å —É—á–µ—Ç–æ–º geoScope
    const allReviews = await prisma.review.findMany({
      where: { 
        appId, 
        platform: platformEnum,
        // –î–ª—è App Store —É—á–∏—Ç—ã–≤–∞–µ–º geoScope, –¥–ª—è Google Play - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        // –í–ê–ñ–ù–û: –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç geoScope: null)
        ...(platform === 'appstore' && geoScope !== 'all' ? { 
          OR: [
            { geoScope },
            { geoScope: null } // –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ geoScope
          ]
        } : platform === 'appstore' && geoScope === 'all' ? {
          // –î–ª—è 'all' - –±–µ—Ä–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç geoScope
        } : {})
      },
      orderBy: { date: 'desc' }
    })

    const totalRating = allReviews.reduce((sum, review) => sum + review.rating, 0)

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const convertedReviews = allReviews.map(convertDbReviewToFrontend)
    const uniqueReviews = deduplicateReviewsByContent(convertedReviews)

    return {
      reviews: uniqueReviews,
      totalCount: uniqueReviews.length,
      averageRating: Math.round((totalRating / allReviews.length) * 10) / 10,
      fromCache: false
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  private static async saveApp(appId: string, platform: Platform) {
    await prisma.app.upsert({
      where: { appId },
      create: {
        appId,
        platform,
        name: null,
        bundleId: null
      },
      update: {
        updatedAt: new Date()
      }
    })
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤—ã
  private static async saveReviews(
    appId: string, 
    platform: Platform, 
    reviews: any[],
    geoScope?: string
  ): Promise<number> {
    let newReviewsCount = 0
    
    for (const review of reviews) {
      try {
        const result = await prisma.review.upsert({
          where: {
            originalId_platform_appId: {
              originalId: review.id,
              platform,
              appId
            }
          },
          create: {
            originalId: review.id,
            appId,
            platform,
            title: review.title,
            content: review.content,
            rating: review.rating,
            author: review.author,
            date: new Date(review.date),
            version: review.version,
            helpful: review.helpful,
            geoScope: platform === 'APPSTORE' ? geoScope : null
          },
          update: {} // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–∑—ã–≤—ã
        })
        
        // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ (–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if (result.createdAt.getTime() === result.updatedAt.getTime()) {
          newReviewsCount++
        }
      } catch (error) {
        console.warn(`Failed to save review ${review.id}:`, error)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
      }
    }
    
    return newReviewsCount
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ
  static async getFilteredReviews(
    appId: string,
    platform: 'appstore' | 'googleplay',
    dateFilter: '7days' | '30days' | '90days' | 'all'
  ): Promise<Review[]> {
    const platformEnum = platform === 'appstore' ? Platform.APPSTORE : Platform.GOOGLEPLAY
    
    let dateThreshold: Date | undefined
    if (dateFilter !== 'all') {
      const days = dateFilter === '7days' ? 7 : dateFilter === '30days' ? 30 : 90
      dateThreshold = new Date(Date.now() - days * 24 * 60 * 60 * 1000)
    }

    const dbReviews = await prisma.review.findMany({
      where: {
        appId,
        platform: platformEnum,
        ...(dateThreshold && { date: { gte: dateThreshold } })
      },
      orderBy: { date: 'desc' }
    })

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const convertedReviews = dbReviews.map(convertDbReviewToFrontend)
    return deduplicateReviewsByContent(convertedReviews)
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
  static async getApps() {
    return await prisma.app.findMany({
      include: {
        _count: {
          select: {
            reviews: true,
            analyses: true
          }
        }
      },
      orderBy: { updatedAt: 'desc' }
    })
  }
}